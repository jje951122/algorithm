//bfs
#include <iostream>
#include <queue>
using namespace std;

int N, M, sy, sx, dy, dx;
int arr[1001][1001];
bool check[1001][1001][2];
int y_dir[4] = { 0,1,0,-1 };
int x_dir[4] = { 1,0,-1,0 };
struct pos {
    int y, x, dis;
    bool use = false;
};

int bfs() {
    queue<pos> q;
    q.push(pos{ sy,sx,0 });

    int y, x, ny, nx, dis;
    bool nuse;
    bool use;
    while (!q.empty()) {
        y = q.front().y;
        x = q.front().x;
        dis = q.front().dis;
        use = q.front().use;
        q.pop();
        if (y == dy && x == dx) {
            return dis;
        }
        for (int i = 0; i < 4; i++) {
            ny = y + y_dir[i];
            nx = x + x_dir[i];
            nuse = use;
            if (ny<1 || nx<1 || ny>N || nx>M)continue;

            if (arr[ny][nx] == 1) {
                if (use)continue;
                nuse = true;
            }
            if (!check[ny][nx][nuse]) {
                check[ny][nx][nuse] = true;
                q.push(pos{ ny,nx,dis + 1,nuse });
            }
        }
    }
    return -1;
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> N >> M;
    cin >> sy >> sx;
    cin >> dy >> dx;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= M; j++) {
            cin >> arr[i][j];
        }
    }
    cout << bfs();
    return 0;
}
