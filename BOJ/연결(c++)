//시뮬레이션
// a부터 연결, b부터 연결 따로따로

#include <fstream>
#include <cstring>
#include <vector>
#include <queue>

#define INF 987654321
using namespace std;

int N, M;
int dir_y[] = { 0,1,0,-1 };
int dir_x[] = { 1,0,-1,0 };

struct pos {
	int sy, sx;
	int dy, dx;
};
pos p[2];

struct info {
	int y, x;
	int dis;
	vector<pair<int, int>> route;
};

int bfs(int idx , vector<pair<int, int>> path, bool flag ) {
	int y = p[idx].sy;
	int x = p[idx].sx;
	int dy = p[idx].dy;
	int dx = p[idx].dx;
  
  //가면 안되는 곳 다른 연결의 출발점, 도착점
	pair<int, int> cannot[2];
	cannot[0].first = p[(idx + 1) % 2].dy;
	cannot[0].second = p[(idx + 1) % 2].dx;
	cannot[1].first = p[(idx + 1) % 2].sy;
	cannot[1].second = p[(idx + 1) % 2].sx;

	bool visit[101][101];
	memset(visit, false, sizeof(visit));
	for (int i = 0; i < path.size(); i++) {
		visit[path[i].first][path[i].second] = true;
	}
	visit[y][x] = true;

	queue<info> q;
	q.push(info{ y,x,0 });
	int ny, nx, dis;
	vector<pair<int, int>> route;

	while (!q.empty()) {
		y = q.front().y;
		x = q.front().x;
		dis = q.front().dis;
		route = q.front().route;
		q.pop();

		if (y == dy && x == dx) {
			if (!flag) {//첫 연결이면 다음 연결 함수 실행
				int next_dis = bfs((idx + 1) % 2, route, true);
				if (next_dis == INF)
					continue;
				else
					return dis + next_dis;
			}
			else {//두번째 연결이면 반환
				return dis;
			}
			
		}

		for (int i = 0; i < 4; i++) {
			ny = y + dir_y[i];
			nx = x + dir_x[i];
			if (ny<0 || nx<0 || ny>N || nx>M)continue;

			bool f=true;
			for (int j = 0; j < 2; j++) {
				if (cannot[j].first == ny && cannot[j].second == nx)
					f = false;
			}
			if (!f)continue;

			if (visit[ny][nx])continue;
			visit[ny][nx] = true;
			route.push_back(make_pair(ny, nx));
			q.push(info{ ny,nx,dis+1,route });
			route.pop_back();
		}
	}
	return INF;//연결이 안되면 INF 반환
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

	cin >> M >> N;

	int a1x, a2x, b1x, b2x, a1y, a2y, b1y, b2y;
	cin >> a1x >> a1y;
	cin >> a2x >> a2y;
	p[0].sy = a1y; p[0].sx = a1x;
	p[0].dy = a2y; p[0].dx = a2x;
	cin >> b1x >> b1y;
	cin >> b2x >> b2y;
	p[1].sy = b1y; p[1].sx = b1x;
	p[1].dy = b2y; p[1].dx = b2x;


	int f = bfs(0, vector<pair<int, int>>(), false);//a부터 최단 연결 그후 b연결
	int s = bfs(1, vector<pair<int, int>>(), false);//b부터 연결

	int res = f < s ? f : s;
	if (res == INF) {
		cout << "IMPOSSIBLE";
	}
	else
		cout << res;

	return 0;
}
    
