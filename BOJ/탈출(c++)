#include <iostream>
#include <cstring>
#include <queue>

using namespace std;
int N, M;
char arr[50][50];
int time[50][50];
bool visit[50][50];
int sx, sy;
int y_dir[] = { 0,1,0,-1 };
int x_dir[] = { 1,0,-1,0 };
queue<pair<int, int>> water;
struct pos {
    int y, x, dis;
};
queue<pos> next_q;

void time_schedule() {//몇분에 잠기는지 arr계산
    int y, x, ny, nx;
    while (!water.empty()) {
        y = water.front().first;
        x = water.front().second;
        water.pop();

        for (int i = 0; i < 4; i++) {
            ny = y + y_dir[i];
            nx = x + x_dir[i];
            if (ny < 0 || nx < 0 || ny >= N || nx >= M)continue;
            if (arr[ny][nx] == '.') {
            if (time[ny][nx] > time[y][x]+1) {
                time[ny][nx] = time[y][x] + 1;
                water.push(make_pair(ny, nx));
                }
            }
        }
    }
}

void bfs() {
    queue<pos> q;
    q.push(pos{ sy,sx,0 });
    visit[sy][sx] = true;

    int y, x, ny, nx,dis;
    while (!q.empty()) {
        y = q.front().y;
        x = q.front().x;
        dis = q.front().dis;
        q.pop();

        if (arr[y][x] == 'D') {
            cout << dis;
            return;
        }

        for (int i = 0; i < 4; i++) {
            ny = y + y_dir[i];
            nx = x + x_dir[i];
            if (ny < 0 || nx < 0 || ny >= N || nx >= M)continue;
            if (visit[ny][nx])continue;
            if (time[ny][nx] == -1)continue;
            if (time[ny][nx] == 0 || time[ny][nx] > dis + 1) {
                visit[ny][nx] = true;
                q.push(pos{ ny,nx,dis + 1 });
            }
        }
    }

    cout<<"KAKTUS";
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> N >> M;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            time[i][j] = 999;
            cin >> arr[i][j];
            if (arr[i][j] == 'S') {
                sy = i; sx = j;
            }
            else if (arr[i][j] == '*') {
                water.push(make_pair(i, j));
                time[i][j] = 0;
            }
            else if (arr[i][j] == 'X') {
                time[i][j] = -1;
            }
        }
    }
    
    time_schedule();

    bfs();
    return 0;
}
