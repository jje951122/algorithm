//bfs, 시뮬, 
#include <iostream>
#include <queue>
#include <cstring>


using namespace std;
int N, M, G, R;
int map[51][51];
int r_time[51][51];
int g_time[51][51];
bool flower[51][51];
vector<pair<int, int>> pos;
vector<pair<int, int>> g_pos;
vector<pair<int, int>> r_pos;
int pos_size;
int MAX = 0;
int dy[] = { 0,1,0,-1 };
int dx[] = { 1,0,-1,0 };

struct p {
	int y, x;
};

void bfs() {
	queue<p> rq,gq, next_rq, next_gq;	
	int y, x, ny,nx;
	int cnt = 0;

	memset(g_time, -1, sizeof(g_time));
	memset(r_time, -1, sizeof(r_time));
	memset(flower, false, sizeof(flower));
	for (int i = 0; i < G; i++) {
		y = g_pos[i].first; x = g_pos[i].second;
		g_time[y][x] = 0;
		gq.push(p{ y,x});
	}
	for (int i = 0; i < R; i++) {
		y = r_pos[i].first; x = r_pos[i].second;
		r_time[y][x] = 0;
		rq.push(p{ y,x});
	}

	while (!rq.empty() || !gq.empty()) {
		
		while (!gq.empty()) {
			y = gq.front().y;
			x = gq.front().x;
			gq.pop();

			if (flower[y][x])continue;

			for (int i = 0; i < 4; i++) {
				ny = y + dy[i];
				nx = x + dx[i];
				if (ny<1 || nx<1 || ny>N || nx>M)continue;
				if (map[ny][nx] == 0)continue;
				if (g_time[ny][nx] != -1)continue;
				if (r_time[ny][nx] != -1)continue;
				g_time[ny][nx] = g_time[y][x] + 1;
				next_gq.push(p{ ny,nx });
			}
		}
		gq = next_gq;
		next_gq = queue<p>();
		
		while (!rq.empty()) {
			y = rq.front().y;
			x = rq.front().x;
			rq.pop();

			for (int i = 0; i < 4; i++) {
				ny = y + dy[i];
				nx = x + dx[i];
				if (ny<1 || nx<1 || ny>N || nx>M)continue;
				if (map[ny][nx] == 0)continue;
				if (r_time[ny][nx] != -1)continue;
				if (g_time[ny][nx] == -1) {
					r_time[ny][nx] = r_time[y][x] + 1;
					next_rq.push(p{ ny,nx});
				}
				else if (g_time[ny][nx] == r_time[y][x]+1) {
					flower[ny][nx] = true;
					r_time[ny][nx] = r_time[y][x] + 1;
					cnt++;
				}
			}
		}
		
		rq = next_rq;
		next_rq = queue<p>();
	}

	if (cnt > MAX)
		MAX = cnt;	
}



void setting(int idx, int g_cnt, int r_cnt) {
	if (G - g_cnt + R - r_cnt > pos_size - idx)return;
	if (r_cnt == R && g_cnt == G) {
		return bfs();
	}
	if (idx == pos_size)return;
	int y = pos[idx].first;
	int x = pos[idx].second;

	setting(idx + 1, g_cnt, r_cnt);

	if (g_cnt < G) {
		g_pos.push_back(make_pair(y, x));
		setting(idx + 1, g_cnt + 1, r_cnt);
		g_pos.pop_back();
	}
	if (r_cnt < R) {
		r_pos.push_back(make_pair(y, x));
		setting(idx + 1, g_cnt , r_cnt+1);
		r_pos.pop_back();
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

	cin >> N >> M >> G >> R;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2) {
				pos.push_back(make_pair(i, j));
			}
		}
	}
	pos_size = pos.size();
	setting(0, 0, 0);
	cout << MAX;
	return 0;
}
    
