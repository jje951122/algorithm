//union find
#include <iostream>

using namespace std;

int N, M;
int P[500001];
int find_parent(int x) {
	if (P[x] == x)
		return x;
	return P[x] = find_parent(P[x]);
}
bool connect(int a, int b) {
	a = find_parent(a);
	b = find_parent(b);
	if (a == b)
		return true;
	else {
		if (a < b) {
			P[b] = a;
		}
		else {
			P[a] = b;
		}
		return false;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
    
	cin >> N>>M;
	for (int i = 0; i <N ; i++) {
		P[i] = i;
	}
	int a, b;
	for (int i = 1; i <= M; i++) {
		cin >> a >> b;
		if (connect(a, b)) {
			cout << i;
			return 0;
		}
	}
	cout << 0;
	return 0;
}
    
