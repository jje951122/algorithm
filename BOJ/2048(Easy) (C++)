//브루트포스

#include <iostream>
#include <queue>
#include <cstring>

using namespace std;
vector<vector<int>> arr(21, vector<int>(21));
int answer = 0;
int N;
void block_move(vector<vector<int>> &target) {//위로 
    vector<int> v;
    for (int x = 0; x < N; x++) {
        v.clear();
        bool flag = false;
        for (int y = 0; y < N; y++) {
            if (target[y][x] == 0)continue;
            if (v.empty())
                v.push_back(target[y][x]);
            else {
                if (v[v.size() - 1] == target[y][x]&&!flag) {
                    v[v.size() - 1] *= 2;
                    flag = true;
                }
                else {
                    v.push_back(target[y][x]);
                    flag = false;
                }
            }
        }
        for (int i = v.size(); i <= N; i++)
            v.push_back(0);
        for (int i = 0; i < N; i++) {
            target[i][x] = v[i];
        }
    }
}

void rotate(vector<vector<int>> &arr, int cnt) {//90도 회전
    vector<vector<int>> target(N, vector<int>(N));
    for (int _cnt = 0; _cnt < cnt; _cnt++) {
        int index = N-1;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                target[j][index] = arr[i][j];
            }
            index--;
        }
        arr = target;
    }
}

void cal_block(vector<int> v) {
    vector<vector<int>> target = arr;
    for (int i = 0; i < 5; i++) {
        int cmd = v[i];
        if (cmd == 1) {//하
            rotate(target, 2);//회전
            block_move(target);//이동
            rotate(target, 2);/
        }
        else if (cmd == 2) {//우로 밀착
            rotate(target, 3);
            block_move(target);
            rotate(target, 1);
        }
        else if (cmd == 3) {//좌로 밀탈
            rotate(target, 1);
            block_move(target);
            rotate(target, 3);
        }
        else
            block_move(target);
    }
    //최대 찾기
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (answer < target[i][j])
                answer = target[i][j];
        }
    }
}

void seq(vector<int> v) {
    if (v.size() == 5) {
        cal_block(v);
        return;
    }
    
    for (int i = 0; i < 4; i++) {
        v.push_back(i);
        seq(v);
        v.pop_back();
    }
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N;
    arr.resize(N, vector<int>(N));
  
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> arr[i][j];
        }
    }
    vector<int> v;
    seq(v);
    cout<<answer;

    return 0;
}

