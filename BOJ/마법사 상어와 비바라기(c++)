//시뮬
#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

int N, M;
int dy[] = {0,0,-1,-1,-1,0,1,1,1};
int dx[] = {0,-1,-1,0,1,1,1,0,-1 };
int cross_y[] = {-1,1,1,-1};
int cross_x[] = { 1,1,-1,-1 };
int rain_y[] = {0,0,-1,-1};
int rain_x[] = { 0,1,1,0 };
int map[51][51];
bool visit[51][51];
vector<pair<int, int>> cloud;

void pos_change(int& y, int& x) {
	if (y<1) {
		y = N + y;
	}
	if (x < 1) {
		x = N + x;
	}
	if (y > N) {
		y = y - N;
	}
	if (x > N) {
		x = x - N;
	}
}

void move_cloud(int d, int s) {
	int size = cloud.size();
	for (int i = 0; i < size; i++) {
		int next_y = cloud[i].first + (dy[d] * (s % N));
		int next_x = cloud[i].second + (dx[d] * (s % N));
		pos_change(next_y, next_x);
		visit[next_y][next_x] = true;//구름위치에 대한 정보를 남기기 위해
	}
	cloud.clear();
}

void rain() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (visit[i][j]) {
				map[i][j]++;
			}
		}
	}
}

void water_copy() {//물복사
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (visit[i][j]) {
				for (int dir = 0; dir < 4; dir++) {
					int ny = i + cross_y[dir];
					int nx = j + cross_x[dir];
					if (ny<1 || nx<1 || ny>N || nx>N)continue;
					if (map[ny][nx] > 0) {
						map[i][j]++;
					}
				}
			}
		}
	}
}

void make_cloud() {//구름생성
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (visit[i][j]||map[i][j]<2)continue;
			map[i][j] -= 2;
			cloud.push_back(make_pair(i, j));
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}
	cloud.push_back(make_pair(N,1));
	cloud.push_back(make_pair(N,2));
	cloud.push_back(make_pair(N-1,1));
	cloud.push_back(make_pair(N-1,2));

	int d, s;
	for (int i = 0; i < M; i++) {
		cin >> d >> s;
		memset(visit, false, sizeof(visit));
		move_cloud(d, s);
		rain();
		water_copy();
		make_cloud();
	}

	int sum = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			sum += map[i][j];
		}
	}
	cout << sum;

	return 0;
}
    
