//시물레이션
#include <iostream>
#include <vector>

using namespace std;
int dy[] = {0,1,0,-1};
int dx[] = { 1,0,-1,0 };
int map[101][101];
int A, B, N, M;

struct pos {
	int y, x, dir;
};
vector<pos> robot;

bool move(int num, char c, int cnt) {
	if (c == 'F') {
		int y, x,dir;
		y = robot[num].y;
		x = robot[num].x;
		dir = robot[num].dir;
		map[y][x] = 0;
		for (int i = 0; i < cnt; i++) {
			y += dy[dir];
			x += dx[dir];
			if (y<1 || x<1 || y>B || x>A) {
				printf("Robot %d crashes into the wall", num);
				return false;
			}
			else if (map[y][x] != 0) {
				printf("Robot %d crashes into robot %d", num, map[y][x]);
				return false;
			}
		}
    
		robot[num].y = y;
		robot[num].x = x;
		map[y][x] = num;
	}
  
	else {
		int moment = c == 'R' ? 1 : -1;
		int dir = ((robot[num].dir + 1000) + (cnt*moment)) % 4;
		robot[num].dir = dir;
	}
	return true;
}

int main() {
	cin >> A >> B;
	cin >> N >> M;

	robot.resize(N + 1);
	int x, y;
	char d;
	for (int i =1; i <= N; i++) {
		cin >> x >> y >> d;
		y = B - y + 1;
		robot[i].y = y;
		robot[i].x = x;
		if (d == 'E')
			robot[i].dir = 0;
		else if(d=='S')
			robot[i].dir = 1;
		else if(d=='W')
			robot[i].dir = 2;
		else
			robot[i].dir = 3;

		map[y][x] = i;
	}

	int num, cnt;
	char c;
	for (int i = 0; i < M; i++) {
		cin >> num >> c >> cnt;
		if (!move(num, c, cnt))
			return 0;
	}
  
	printf("OK");
	return 0;
}
