//BFS
#include <iostream>
#include <vector>
#include <cstring>
#include <queue>

using namespace std;
int N, M;
bool visit[101][101];
vector<pair<int, int>> map[101][101];
bool light[101][101];
int dx[] = {1,0,-1,0};
int dy[] = { 0,1,0,-1 };

int bfs() {
    queue<pair<int, int>> q;
    light[1][1] = true;
    
    int cnt = 1;

    int y, x, ny, nx;
    while (1) {//q가 도는 동안 새롭게 켜지는 불 X->return
        q.push(make_pair(1, 1));
        memset(visit, false, sizeof(visit));
        visit[1][1] = true;
        bool flag = false;
        while (!q.empty()) {
            y = q.front().first;
            x = q.front().second;
            q.pop();
            for (int i = 0; i < map[y][x].size(); i++) {
                ny = map[y][x][i].first;
                nx = map[y][x][i].second;
                if (!light[ny][nx]) {
                    light[ny][nx] = true;
                    cnt++;
                    flag = true;
                }
            }

            for (int i = 0; i < 4; i++) {
                ny = y + dy[i];
                nx = x + dx[i];
                if (ny<1 || nx<1 || ny>N || nx>N)continue;
                if (visit[ny][nx] || !light[ny][nx])continue;
                visit[ny][nx] = true;
                q.push(make_pair(ny, nx));
            }
        }
        if (!flag) {
            return cnt;
        }
    }
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M;
    int sy, sx, dy, dx;
    for (int i = 0; i < M; i++) {
        cin >> sx >> sy >> dx >> dy;
        map[sy][sx].push_back(make_pair(dy,dx));
    }

    cout << bfs();
    return 0;
}
