//dp
#include <iostream>
#include <algorithm>

using namespace std;

int map[1001][1001];
int dp[1001][1001];


int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    int N, M;
    int ans = 0;
    cin >> M >> N;
    
    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++) {
            cin >> map[i][j];
            if (i==1||j==1) {
                if (map[i][j] == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = 0;
            }
        }
    }

    for (int i = 2; i <= M; i++) {
        for (int j = 2; j <= N; j++) {
            if (map[i][j] != 0)
                dp[i][j] = 0;
            else {
                if (map[i - 1][j - 1] == 0 && map[i - 1][j] == 0 && map[i][j - 1] == 0) {
                    dp[i][j] = min({ dp[i - 1][j - 1],dp[i - 1][j],dp[i][j - 1] }) + 1;
                }
                else
                    dp[i][j] = 1;
            }
        }
    }

    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++) {
            if (ans < dp[i][j])
                ans = dp[i][j];
        }
    }

    cout << ans;
    return 0;
}
