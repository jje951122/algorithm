//시뮬레이션
// 1. 상어잡기 - 사람의 현재 위치에서 열을 증가시키며 상어가 있는지 확인 -> sum+=상어 사이즈, 상어 사이즈=0, 맵의 현재위치의 상어정보 삭제
// 2. 상어이동 - for(상어수)-> 상어사이즈==0 continue, map 정보 삭제
//               for(상어수)-> 상어사이즈==0 continue, 위치 계산 ->  map push 
// 3. 같은 위치 상어 삭제 

#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


struct shark_info {
    int y, x;
    int speed, dir, size, index;//z는 크기지만 이미 잡히거나 먹힌 상어는 0으로 표기
};
vector<int> map[101][101];
vector<shark_info> shark;
int N, M;
int x_dir[5] = { 0,0,0,1,-1 };
int y_dir[5] = { 0,-1,1,0,0 };
int sum = 0;
int shark_num;

int change_dir(int d){
    if (d == 1)return 2;
    else if (d == 2)return 1;
    else if (d == 3)return 4;
    else if (d == 4)return 3;
}
bool isrange(int y, int x) {
    return y > 0 && x > 0 && x <= M && y <= N;
}
bool cmp(int a, int b) {
    return shark[a].size > shark[b].size;
}
void Kill_Shark(){
    for (int i = 1; i <= N; i++)
    {
        for (int j = 1; j <= M; j++)
        {
            if (map[i][j].size() > 1)
            {
                sort(map[i][j].begin(), map[i][j].end(), cmp);
                int live= map[i][j][0];
                for (int k = 1; k < map[i][j].size(); k++)
                {
                    shark[map[i][j][k]].size = 0;
                }
                map[i][j].clear();
                map[i][j].push_back(live);
            }
        }
    }
}


void catch_shark(int x) {
    for(int i=1;i<=N;i++){
        if (map[i][x].size() != 0) {
            sum += shark[map[i][x][0]].size;
            shark[map[i][x][0]].size = 0;
            map[i][x].clear();
            break;
        }
    }
}
void move_shark() {
    int rotate;
    vector<shark_info> new_shark;
    for (int i = 0; i < shark_num; i++) {
        if (shark[i].size == 0)continue;
        map[shark[i].y][shark[i].x].clear();//맵에서 현재 상어의 위치를 삭제
    }
    //갱신
    int next_x, next_y;
    for (int i = 0; i < shark.size(); i++) {
        if (shark[i].size == 0)continue;
        next_y = shark[i].y;
        next_x = shark[i].x;

        //dir에 따라 왕복거리를 구함 계산수 감소
        if (shark[i].dir == 1 || shark[i].dir == 2) {
            rotate = (N - 1) * 2;
        }
        else {
            rotate = (M - 1) * 2;
        }

        //speed%rotate로 왕복한 거리는 제외
        for (int j = 0; j < shark[i].speed%rotate; j++) {
            if (!isrange(next_y+ y_dir[shark[i].dir], next_x+ x_dir[shark[i].dir])){
                shark[i].dir = change_dir(shark[i].dir);
            }
            next_y += y_dir[shark[i].dir];
            next_x += x_dir[shark[i].dir];
        }
        shark[i].y = next_y;
        shark[i].x = next_x;
        
        map[next_y][next_x].push_back(i);
    }
    Kill_Shark();
    
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M >> shark_num;
    int y, x, s, d, z;
    for (int i = 0; i < shark_num;i++) {
        cin >> y >> x >> s >> d >> z;
        shark.push_back(shark_info{ y,x,s,d,z,i});
        map[y][x].push_back(i);
    }

    for (int i = 1; i <= M; i++) {
        catch_shark(i);
        move_shark();
    }
    cout << sum;
    return 0;
}
