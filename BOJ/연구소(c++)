//bfs, 
#include <queue>
#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include <vector>
using namespace std;
int N, M;
int arr[9][9];
int copy_arr[9][9];
int answer = 0;
vector<pair<int, int>> virus_pos;
int y_dir[4] = {1,0,-1,0};
int x_dir[4] = { 0,1,0,-1 };

void spread_virus() {
    queue<pair<int, int>> q;
    
    for (int i = 0; i < virus_pos.size(); i++) {
        q.push(make_pair(virus_pos[i].first, virus_pos[i].second));
    }
    int x, y, nx, ny;
    while (!q.empty()) {
        y = q.front().first;
        x = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            ny = y + y_dir[i];
            nx = x + x_dir[i];
            if (nx < 0 || ny < 0 || nx >= M || ny >= N)continue;
            if (copy_arr[ny][nx] == 0) {
                copy_arr[ny][nx] = 2;
                q.push(make_pair(ny, nx));
            }
        }
    }
    int cnt = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (copy_arr[i][j] == 0)
                cnt++;
        }
    }
    if (cnt > answer)
        answer = cnt;
}

void assign_block(int cnt) {
    if (cnt == 3) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                copy_arr[i][j] = arr[i][j];
            }
        }
        spread_virus();
        return;
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (arr[i][j] == 0) {
                arr[i][j] = 1;
                assign_block(cnt + 1);
                arr[i][j] = 0;
            }
        }
    }
}
int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M;
   
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> arr[i][j];
            if (arr[i][j] == 2)
                virus_pos.push_back(make_pair(i, j));
        }
    }
    assign_block(0);
    cout << answer;
    return 0;
}
