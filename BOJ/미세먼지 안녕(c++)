//시뮬레이션
#include <iostream>
#include <cstring>
#define MAX 51

using namespace std;
int R,C,T;
int map[MAX][MAX];
int copy_map[MAX][MAX];
int up_y, up_x, down_y, down_x;
//반시계 방향 이동, 
int recir_dy[] = {0,-1,0,1};
int recir_dx[] = {1,0,-1,0};
//시계방향 이동, 확산시 네방향 겸용
int cir_dy[] = {0,1,0,-1};
int cir_dx[] = { 1,0,-1,0 };

void copy(int src[MAX][MAX], int des[MAX][MAX]) {
    for (int i = 1; i < MAX; i++) {
        for (int j = 1; j < MAX; j++) {
            des[i][j] = src[i][j];
        }
    }
}

void spread() {
    int ny, nx;
    int spread_dust;
    int cnt;
    for (int i = 1; i <= R; i++) {
        for (int j = 1; j <= C; j++) {
            if (map[i][j] ==0|| (i == up_y && j == up_x) || (i == down_y && j == down_x))continue;
            cnt = 0;
            spread_dust = map[i][j] / 5;
            for (int d = 0; d < 4; d++) {
                ny = i + cir_dy[d];
                nx = j + cir_dx[d];
                if (ny<1 || nx<1 || ny>R || nx>C||(ny==up_y&&nx==up_x)||(ny==down_y&&nx==down_x))continue;
                copy_map[ny][nx] += spread_dust;
                cnt++;
            }
            copy_map[i][j] += map[i][j] - (spread_dust * cnt);
        }
    }
    copy(copy_map, map);
}

void up_operator() {//위 반시계 방향 순환
    for (int i = up_y; i > 1; i--) {
        map[i][1] = map[i - 1][1];
    }
    map[up_y][up_x] = 0;
    for (int i = 1; i < C; i++) {
        map[1][i] = map[1][i + 1];
    }
    for (int i = 1; i < up_y; i++) {
        map[i][C] = map[i + 1][C];
    }
    for (int i = C; i > up_x; i--) {
        map[up_y][i] = map[up_y][i - 1];
    }
    
}

void down_operator() {//아래 시계 방향 순환
    for (int i = down_y ; i < R; i++) {
        map[i][1] = map[i + 1][1];
    }
    map[down_y][down_x] = 0;
    for (int i = 1; i < C; i++) {
        map[R][i] = map[R][i + 1];
    }
    for (int i = R; i > down_y; i--) {
        map[i][C] = map[i - 1][C];
    }
    for (int i = C; i > down_x; i--) {
        map[down_y][i] = map[down_y][i - 1];
    }
    
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> R >> C >> T;
    
    bool flag = false;
    for (int i = 1; i <= R; i++) {
        for (int j = 1; j <= C; j++) {
            cin >> map[i][j];
            if (map[i][j] == -1) {
                if (!flag) {
                    up_y = i; up_x = j;
                    flag = true;
                }
                else {
                    down_y = i;
                    down_x = j;
                }
            }    
        }
    }

    int time = 0;
    while (time!=T) {
        memset(copy_map, 0, sizeof(copy_map));
        spread();
        up_operator();
        down_operator();
        time++;
    }
    
    //남은 먼지양
    int cnt = 0;
    for (int i = 1; i <= R; i++) {
        for (int j = 1; j <= C; j++) {
            cnt += map[i][j];
        }
    }
    cout << cnt;
    return 0;
}
