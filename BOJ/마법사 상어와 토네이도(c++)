//
#include <iostream>

using namespace std;

int N;
int arr[500][500];
int y_spread[4][10] = { {0,-1,1,-2,-1,1,2,-1,1,0},{2,1,1,0,0,0,0,-1,-1,1},{0,1,-1,2,1,-1,-2,1,-1,0},{-2,-1,-1,0,0,0,0,1,1,-1} };
int x_spread[4][10] = { {-2,-1,-1,0,0,0,0,1,1,-1},{0,1,-1,2,1,-1,-2,1,-1,0},{2,1,1,0,0,0,0,-1,-1,1},{0,1,-1,2,1,-1,-2,1,-1,0} };
double percent[9] = { 5,10,10,2,7,7,2,1,1 };
int answer;
int y_dir[4] = {0,1,0,-1};
int x_dir[4] = { -1,0,1,0 };

void change_dir(int &dir) {
    if (dir == 0)
        dir= 1;
    else if (dir == 1)
        dir= 2;
    else if (dir == 2)
        dir= 3;
    else
        dir= 0;
}

void spread_sand(int y, int x, int dir) {
    int next_x, next_y; //모래가 움직이는 좌표
    int nx, ny;//현재 모래 좌표
    nx = x + x_dir[dir];
    ny = y + y_dir[dir];
    if (arr[ny][nx] == 0)return;
    int now_sand = arr[ny][nx];
    int temp = now_sand;
    int plus;
    
    for (int i = 0; i < 9; i++) {
        next_x = nx + x_spread[dir][i];
        next_y = ny + y_spread[dir][i];
        plus = (now_sand * percent[i]) / 100;
        if (next_x >= 1 && next_y >= 1 && next_x <= N && next_y <= N) {
            arr[next_y][next_x] +=plus;
        }
        else {
            answer += plus;
        }
        temp -= plus;
    }
    next_y = ny + y_spread[dir][9];
    next_x = nx + x_spread[dir][9];
    if (next_x >= 1 && next_y >= 1 && next_x <= N && next_y <= N) {
        arr[next_y][next_x] += temp;
    }
    else
        answer += temp;
    arr[ny][nx] = 0;
}

void move() {
    int move = 1;
    int dir = 0;
    int x = (N + 1) / 2;
    int y = (N + 1) / 2;
    while (1) {
        for (int i = 0; i < 2; i++) {//2번-이동하는 칸수가 같음
            for (int j = 0; j < move; j++) {//이동하는 칸수만큼 이동하고 방향 전환
                spread_sand(y,x,dir);
                y += y_dir[dir];
                x += x_dir[dir];
            }
            change_dir(dir);
        }
        move++;
        if (move == N) {// 마지막에 N-1만큼 3번 이동하기 때문에
            for (int j = 0; j < move-1; j++) {
                spread_sand(y, x, dir);
                y += y_dir[dir];
                x += x_dir[dir];
            }
            return;
        }
    }
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    answer = 0;
    cin >> N;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            cin >> arr[i][j];
        }
    }
    move();
    cout << answer;
    return 0;
}
