#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#define MAX_DIS 1234560
using namespace std;
int y_dir[4] = {0,1,0,-1};
int x_dir[4] = { 1,0,-1,0 };
struct pos {
    int y, x, dis;
};
vector<pair<pos, pos>> customer_info;
int N, M,K;
int arr[21][21];
int now_y, now_x;
bool visit[21][21];

bool go(int target_y, int target_x) {//손님을 태우고 
    memset(visit, false, sizeof(visit));
    queue<pos> q;
    q.push(pos{ now_y, now_x ,0 });
    visit[now_y][now_x] = true;

    int ny, nx, x, y,dis;
    while (!q.empty()) {
        y = q.front().y;
        x = q.front().x;
        dis = q.front().dis;
        q.pop();
        if (dis > K)
            break;
        if (y == target_y && x == target_x) {
            K += dis;
            now_y = target_y;
            now_x = target_x;
            return true;
        }

        for (int i = 0; i < 4; i++) {
            ny = y + y_dir[i];
            nx = x + x_dir[i];
            if (ny<1 || nx<1 || ny>N || nx>N) continue;
            if (visit[ny][nx])continue;
            if (arr[ny][nx] == 1)continue;
            visit[ny][nx] = true;
            q.push(pos{ ny, nx, dis + 1 });
        }
    }
    return false;

}
bool select_customer() {//손님 고르기
    int target_y, target_x;
    vector<int> dis_v;
    for (int i = 0; i < customer_info.size(); i++) {
        target_y = customer_info[i].first.y;
        target_x = customer_info[i].first.x;

        memset(visit, false, sizeof(visit));
        queue<pos> q;
        q.push(pos{ now_y, now_x ,0 });
        visit[now_y][now_x] = true;

        int ny, nx, x, y, dis;
        while (!q.empty()) {
            y = q.front().y;
            x = q.front().x;
            dis = q.front().dis;
            q.pop();
            if (dis>K) {
                dis_v.push_back(MAX_DIS);
                break;
            }

            if (y == target_y && x == target_x) {
                dis_v.push_back(dis);
                break;
            }

            for (int i = 0; i < 4; i++) {
                ny = y + y_dir[i];
                nx = x + x_dir[i];
                if (ny<1 || nx<1 || ny>N || nx>N) continue;
                if (visit[ny][nx])continue;
                if (arr[ny][nx] == 1)continue;
                visit[ny][nx] = true;
                q.push(pos{ ny, nx, dis + 1 });
            }
        }
    }
    int min_dis = MAX_DIS;
    int min_i;
    for (int i = 0; i < dis_v.size(); i++) {
        if (dis_v[i] < min_dis) {
            min_dis = dis_v[i];
            min_i = i;
            
        }
        else if (dis_v[i] == min_dis&&min_dis!= MAX_DIS) {
            if (customer_info[min_i].first.y > customer_info[i].first.y) {
                min_dis = dis_v[i];
                min_i = i;
            }
            else if (customer_info[min_i].first.y == customer_info[i].first.y) {
                if (customer_info[min_i].first.x > customer_info[i].first.x) {
                    min_dis = dis_v[i];
                    min_i = i;
                }
            }
        }
    }
    if (min_dis == MAX_DIS)
        return false;
    K -= min_dis;
    now_y = customer_info[min_i].first.y;
    now_x = customer_info[min_i].first.x;
    target_y = customer_info[min_i].second.y;
    target_x = customer_info[min_i].second.x;
    customer_info.erase(customer_info.begin() + min_i);
    bool flag= go(target_y, target_x);
    if (!flag)return false;
    return true;

}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M >> K;
    
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            cin >> arr[i][j];
        }
    }
    cin >> now_y >> now_x;
    int start_y, start_x, target_y, target_x;
    for (int i = 0; i < M; i++) {
        cin>>start_y >> start_x >> target_y >> target_x;
        customer_info.push_back(make_pair(pos{ start_y, start_x }, pos{ target_y, target_x }));
    }
    bool flag;
    while (!customer_info.empty()) {
        flag = true;
        flag=select_customer();
        if (!flag) {
            cout << -1;
            return 0;
        }
    }
    cout << K;
    return 0;
}
