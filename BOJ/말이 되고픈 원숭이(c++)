#include <iostream>
#include <queue>

using namespace std;
int N, M, K;
int arr[201][201];
bool visit[201][201][31];
int monkey_y[4] = { 0,1,0,-1 };
int monkey_x[4] = { 1,0,-1,0 };
int horse_y[8] = { -1,-2,-2,-1,1,2,2,1 };
int horse_x[8] = { -2,-1,1,2,2,1,-1,-2 };

struct pos {
    int y, x, dis, k;
};

int bfs() {
    visit[0][0][0] = true;
    queue<pos> q;
    q.push(pos{ 0,0,0,0 });

    int y, x, dis, k, ny, nx;
    while (!q.empty()) {
        y = q.front().y;
        x = q.front().x;
        dis = q.front().dis;
        k = q.front().k;
        q.pop();

        if (y == N - 1 && x == M - 1) {
            return dis;
        }

        if (k < K) {
            for (int i = 0; i < 8; i++) {
                ny = y + horse_y[i];
                nx = x + horse_x[i];
                if (ny < 0 || nx < 0 || ny >= N || nx >= M)continue;
                if (visit[ny][nx][k+1]|| arr[ny][nx] == 1)continue;
                visit[ny][nx][k+1] = true;
                q.push(pos{ ny, nx, dis + 1, k + 1 });
            }
        }
        for (int i = 0; i < 4; i++) {
            ny = y + monkey_y[i];
            nx = x + monkey_x[i];
            if (ny < 0 || nx < 0 || ny >= N || nx >= M)continue;
            if (visit[ny][nx][k]|| arr[ny][nx] == 1)continue;
            visit[ny][nx][k] = true;
            q.push(pos{ ny, nx, dis + 1, k });
        }
    }
    return -1;
}

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> K;
    cin >> M >> N;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> arr[i][j];
        }
    }
    cout << bfs();
    return 0;
}

