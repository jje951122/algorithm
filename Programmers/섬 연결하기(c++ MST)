#include <string>
#include <vector>
#include <algorithm>
using namespace std;

int parent[101];
int get_parent(int x){
    if(parent[x]==x)
        return x;
    return parent[x]=get_parent(parent[x]);
}
void parent_union(int u, int v){
    u=get_parent(u);
    v=get_parent(v);
    u<v?parent[v]=u:parent[u]=v;
}
bool cmp(vector<int> a, vector<int> b){
    return a[2]<b[2];
}
bool find(int u, int v){
    u=get_parent(u);
    v=get_parent(v);
    u<v?parent[v]=u:parent[u]=v;
    return u==v;
}
int solution(int n, vector<vector<int>> costs) {
    int answer = 0;
    sort(costs.begin(),costs.end(),cmp);
    
    for(int i=0;i<n;i++){
        parent[i]=i;
    }
    
    for(int i=0;i<costs.size();i++){
        if(!find(costs[i][0],costs[i][1])){
            answer+=costs[i][2];
            parent_union(costs[i][0],costs[i][1]);
        }
    }
    
    return answer;
}
