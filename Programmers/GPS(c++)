//dp
#include <vector>

#define INF 987654321
using namespace std;

int solution(int n, int m, vector<vector<int>> edge_list, int k, vector<int> gps_log) {
    vector<int> MAP[n+1];
    vector<vector<int>> dp(k,vector<int>(n+1,INF));
    
    for(int i=0;i<edge_list.size();i++){
        MAP[edge_list[i][0]].push_back(edge_list[i][1]);
        MAP[edge_list[i][1]].push_back(edge_list[i][0]);
    }
    
    dp[0][gps_log[0]] = 0;
    for (int i = 1; i < k; i++) {//시간
        for (int pos = 1; pos <= n; pos++) {
            if (dp[i - 1][pos] == INF)continue;//이전 위치 연결X

            for (auto change : MAP[pos]) {//이전 위치와 이어지는 거점
                int plus = 0;
                if (gps_log[i] != change) {//현재 시간 기록이랑 다르면 고친 곳
                    plus++;
                }
                dp[i][change] = min(dp[i][change], dp[i - 1][pos] + plus);
            }
        }
    }
    if (dp[k-1][gps_log[k-1]] != INF)
        return dp[k-1][gps_log[k-1]];
    else
        return -1;
}
