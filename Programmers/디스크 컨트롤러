//priority queue

#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <algorithm>
using namespace std;
struct cmp{
    bool operator()(vector<int> a, vector<int> b){
        return a[1]>b[1];
    }
};
int solution(vector<vector<int>> jobs) {
    int answer=0;
    sort(jobs.begin(),jobs.end());//요청시간의 올림차순
    priority_queue<vector<int>, vector<vector<int>>, cmp> pq;//작업시간의 내림차순
    int job_index=0, time=0;
    
    while(!pq.empty()||job_index<jobs.size()){
        if(job_index<jobs.size()&&time>=jobs[job_index][0]){
            pq.push(jobs[job_index++]);
            continue;
        }
        if(!pq.empty()){//현재 시간기준 대기중인 작업이 있을 때
            time+=pq.top()[1];
            answer+=time-pq.top()[0];
            pq.pop();
        }
        else{/대기 중인 작업이 없을 떄 
            time=jobs[job_index][0];
        }
    }
    
    return answer/jobs.size();
}
